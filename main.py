import os
import json
import random
import chess
import requests
import logging
from aiogram.client.bot import DefaultBotProperties
import chess.svg
from svglib.svglib import svg2rlg
from reportlab.graphics import renderPM
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    BufferedInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Message,
)
from aiogram.utils.markdown import bold, code, italic
from collections import defaultdict
from datetime import timedelta, datetime
from time import sleep
from io import BytesIO
from typing import Optional, Dict, Any
import pytz
from geopy.geocoders import Nominatim
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
WEATHER_API_KEY = "YOUR_OPENWEATHERMAP_API_KEY"
MAPS_API_KEY = "YOUR_GOOGLE_MAPS_API_KEY"
TRANSLATE_API_KEY = "YOUR_YANDEX_TRANSLATE_API_KEY"

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —ç—Ç–∏ —Ñ–∞–π–ª—ã
DATA_FILE = "users_data.json"
CHECKS_FILE = "checks_data.json"
GAME_STATES = {}
USER_STATES = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
WEATHER_CACHE = {}


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    global users, checks
    try:
        with open(DATA_FILE, "r") as file:
            users = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        users = {}

    try:
        with open(CHECKS_FILE, "r") as file:
            checks = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        checks = {}


def save_data():
    with open(DATA_FILE, "w") as file:
        json.dump(users, file, ensure_ascii=False, indent=4)

    with open(CHECKS_FILE, "w") as file:
        json.dump(checks, file, ensure_ascii=False, indent=4)


# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_data()


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≥–æ–¥–æ–π
class WeatherAPI:
    @staticmethod
    async def get_weather(city: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —á–µ—Ä–µ–∑ OpenWeatherMap API"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if city in WEATHER_CACHE:
                cached_data = WEATHER_CACHE[city]
                if (datetime.now() - cached_data["timestamp"]).seconds < 3600:  # 1 —á–∞—Å –∫—ç—à–∞
                    return cached_data["data"]

            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            WEATHER_CACHE[city] = {
                "timestamp": datetime.now(),
                "data": data
            }

            return data
        except requests.exceptions.RequestException as e:
            logger.error(f"Weather API error: {e}")
            return {"error": str(e)}

    @staticmethod
    def format_weather(data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
        if "error" in data:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {data['error']}"

        try:
            city = data["name"]
            temp = data["main"]["temp"]
            feels_like = data["main"]["feels_like"]
            humidity = data["main"]["humidity"]
            wind_speed = data["wind"]["speed"]
            description = data["weather"][0]["description"].capitalize()
            icon = data["weather"][0]["icon"]

            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞
            timezone = pytz.timezone("UTC")
            sunrise = datetime.fromtimestamp(data["sys"]["sunrise"], timezone).strftime("%H:%M")
            sunset = datetime.fromtimestamp(data["sys"]["sunset"], timezone).strftime("%H:%M")

            weather_icons = {
                "01": "‚òÄÔ∏è",  # —è—Å–Ω–æ
                "02": "‚õÖÔ∏è",  # –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ
                "03": "‚òÅÔ∏è",  # –æ–±–ª–∞—á–Ω–æ
                "04": "‚òÅÔ∏è",  # –ø–∞—Å–º—É—Ä–Ω–æ
                "09": "üåßÔ∏è",  # –¥–æ–∂–¥—å
                "10": "üå¶Ô∏è",  # –¥–æ–∂–¥—å —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
                "11": "‚õàÔ∏è",  # –≥—Ä–æ–∑–∞
                "13": "‚ùÑÔ∏è",  # —Å–Ω–µ–≥
                "50": "üå´Ô∏è",  # —Ç—É–º–∞–Ω
            }

            icon_code = icon[:-1]
            emoji = weather_icons.get(icon_code, "üå°Ô∏è")

            return (
                f"{emoji} –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                f"{description}\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
                f"–í–æ—Å—Ö–æ–¥: {sunrise} üåÖ\n"
                f"–ó–∞–∫–∞—Ç: {sunset} üåá"
            )
        except KeyError as e:
            logger.error(f"Error formatting weather data: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏
class MapsAPI:
    @staticmethod
    async def get_map_image(location: str, zoom: int = 12, size: str = "600x400") -> Optional[bytes]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ Google Maps API"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–µ—Å—Ç–∞
            geolocator = Nominatim(user_agent="telegram_bot")
            location_data = geolocator.geocode(location)
            if not location_data:
                return None

            lat, lon = location_data.latitude, location_data.longitude

            url = f"https://maps.googleapis.com/maps/api/staticmap?center={lat},{lon}&zoom={zoom}&size={size}&maptype=roadmap&markers=color:red%7C{lat},{lon}&key={MAPS_API_KEY}"
            response = requests.get(url)
            response.raise_for_status()
            return response.content
        except Exception as e:
            logger.error(f"Maps API error: {e}")
            return None

    @staticmethod
    async def get_route_map(origin: str, destination: str, mode: str = "driving") -> Optional[bytes]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–æ–º"""
        try:
            geolocator = Nominatim(user_agent="telegram_bot")
            origin_data = geolocator.geocode(origin)
            destination_data = geolocator.geocode(destination)

            if not origin_data or not destination_data:
                return None

            origin_lat, origin_lon = origin_data.latitude, origin_data.longitude
            dest_lat, dest_lon = destination_data.latitude, destination_data.longitude

            url = f"https://maps.googleapis.com/maps/api/staticmap?size=600x400&maptype=roadmap&markers=color:green%7C{origin_lat},{origin_lon}&markers=color:red%7C{dest_lat},{dest_lon}&path=color:0x0000ff80|weight:5|{origin_lat},{origin_lon}|{dest_lat},{dest_lon}&key={MAPS_API_KEY}"
            response = requests.get(url)
            response.raise_for_status()
            return response.content
        except Exception as e:
            logger.error(f"Route Map API error: {e}")
            return None


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
class TranslateAPI:
    @staticmethod
    async def translate_text(text: str, target_lang: str = "ru") -> Optional[str]:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex Translate API"""
        try:
            url = "https://translate.yandex.net/api/v1.5/tr.json/translate"
            params = {
                "key": TRANSLATE_API_KEY,
                "text": text,
                "lang": target_lang,
            }
            response = requests.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            return " ".join(data["text"])
        except Exception as e:
            logger.error(f"Translate API error: {e}")
            return None


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
class ChartGenerator:
    @staticmethod
    async def generate_irisky_chart(user_data: Dict[str, Any]) -> Optional[bytes]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–∞–π–∫–æ–∏–Ω–æ–≤"""
        try:
            history = user_data.get("irisky_history", [])
            if not history:
                return None

            dates = [datetime.fromisoformat(item["date"]) for item in history]
            values = [item["amount"] for item in history]

            plt.figure(figsize=(10, 5))
            plt.plot(dates, values, marker="o", linestyle="-", color="blue")
            plt.title("–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–∞–π–∫–æ–∏–Ω–æ–≤")
            plt.xlabel("–î–∞—Ç–∞")
            plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–π–∫–æ–∏–Ω–æ–≤")
            plt.grid(True)
            plt.tight_layout()

            buf = io.BytesIO()
            plt.savefig(buf, format="png")
            buf.seek(0)
            plt.close()
            return buf.read()
        except Exception as e:
            logger.error(f"Chart generation error: {e}")
            return None


# –ö–ª–∞—Å—Å –¥–ª—è —à–∞—Ö–º–∞—Ç–Ω–æ–π –∏–≥—Ä—ã
class ChessGame:
    def __init__(self, white_player: str, black_player: str):
        self.board = chess.Board()
        self.white_player = white_player
        self.black_player = black_player
        self.current_turn = "white"
        self.moves_history = []
        self.start_time = datetime.now()

    def show_board(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç SVG-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏"""
        return chess.svg.board(
            board=self.board,
            orientation=chess.WHITE if self.current_turn == "white" else chess.BLACK,
            size=400,
            lastmove=self.board.peek() if self.board.move_stack else None,
            check=self.board.king(
                chess.WHITE if self.board.turn == chess.WHITE else chess.BLACK) if self.board.is_check() else None,
        )

    def move(self, move_str: str) -> bool:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ö–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            move = self.board.parse_san(move_str)
            if move in self.board.legal_moves:
                self.board.push(move)
                self.moves_history.append(move_str)
                self.current_turn = "black" if self.current_turn == "white" else "white"
                return True
            return False
        except (chess.IllegalMoveError, chess.InvalidMoveError):
            return False

    def winner(self) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–≥—Ä—ã"""
        if self.board.is_checkmate():
            return self.white_player if self.current_turn == "black" else self.black_player
        if self.board.is_stalemate() or self.board.is_insufficient_material():
            return "Draw"
        return None

    def get_game_status(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã"""
        if self.board.is_checkmate():
            return "–ú–∞—Ç! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: " + ("–ë–µ–ª—ã–µ" if self.current_turn == "black" else "–ß—ë—Ä–Ω—ã–µ")
        if self.board.is_stalemate():
            return "–ü–∞—Ç - –Ω–∏—á—å—è!"
        if self.board.is_insufficient_material():
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –º–∞—Ç–∞ - –Ω–∏—á—å—è!"
        if self.board.is_check():
            return "–®–∞—Ö!"
        return "–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è"

    def get_game_duration(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã"""
        duration = datetime.now() - self.start_time
        hours, remainder = divmod(duration.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{hours:02}:{minutes:02}:{seconds:02}"


# –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã –≤ —à–∞—à–∫–∏
class CheckersGame:
    def __init__(self, player1: str, player2: str):
        self.board = self.create_board()
        self.player1 = player1
        self.player2 = player2
        self.current_player = player1
        self.moves_history = []
        self.start_time = datetime.now()

    @staticmethod
    def create_board() -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –¥–æ—Å–∫—É –¥–ª—è —à–∞—à–µ–∫"""
        board = {}
        for row in range(8):
            for col in range(8):
                if (row + col) % 2 == 1:
                    if row < 3:
                        board[f"{row}{col}"] = {"type": "pawn", "player": 2}
                    elif row > 4:
                        board[f"{row}{col}"] = {"type": "pawn", "player": 1}
                    else:
                        board[f"{row}{col}"] = None
                else:
                    board[f"{row}{col}"] = None
        return board

    def move(self, from_pos: str, to_pos: str) -> bool:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ö–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ö–æ–¥–∞ (–±–µ–∑ —É—á–µ—Ç–∞ –ø—Ä–∞–≤–∏–ª —à–∞—à–µ–∫)
        if from_pos in self.board and to_pos in self.board:
            piece = self.board[from_pos]
            if piece and ((piece["player"] == 1 and self.current_player == self.player1) or
                          (piece["player"] == 2 and self.current_player == self.player2)):
                self.board[to_pos] = piece
                self.board[from_pos] = None
                self.moves_history.append(f"{from_pos}-{to_pos}")
                self.current_player = self.player2 if self.current_player == self.player1 else self.player1
                return True
        return False

    def show_board(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ASCII-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏"""
        board_str = "  0 1 2 3 4 5 6 7\n"
        for row in range(8):
            board_str += f"{row} "
            for col in range(8):
                pos = f"{row}{col}"
                piece = self.board[pos]
                if piece is None:
                    board_str += ". "
                elif piece["player"] == 1:
                    board_str += "‚óã " if piece["type"] == "pawn" else "‚ìÑ "
                else:
                    board_str += "‚óè " if piece["type"] == "pawn" else "‚óâ "
            board_str += "\n"
        return board_str

    def winner(self) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–≥—Ä—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        p1_pieces = sum(1 for piece in self.board.values() if piece and piece["player"] == 1)
        p2_pieces = sum(1 for piece in self.board.values() if piece and piece["player"] == 2)

        if p1_pieces == 0:
            return self.player2
        if p2_pieces == 0:
            return self.player1
        return None


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–≤–∏–∑–∞–º–∏
class QuizManager:
    QUIZZES = {
        "general": [
            {
                "question": "–ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?",
                "options": ["–õ–æ–Ω–¥–æ–Ω", "–ë–µ—Ä–ª–∏–Ω", "–ü–∞—Ä–∏–∂", "–ú–∞–¥—Ä–∏–¥"],
                "answer": 2,
            },
            {
                "question": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?",
                "options": ["7", "8", "9", "10"],
                "answer": 1,
            },
            {
                "question": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–í–æ–π–Ω—É –∏ –º–∏—Ä'?",
                "options": ["–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–¢–æ–ª—Å—Ç–æ–π", "–ß–µ—Ö–æ–≤", "–¢—É—Ä–≥–µ–Ω–µ–≤"],
                "answer": 1,
            },
        ],
        "science": [
            {
                "question": "–ö–∞–∫–æ–π —Ö–∏–º–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è –∫–∞–∫ 'O'?",
                "options": ["–ó–æ–ª–æ—Ç–æ", "–ö–∏—Å–ª–æ—Ä–æ–¥", "–û—Å–º–∏–π", "–û–ª–æ–≤–æ"],
                "answer": 1,
            },
            {
                "question": "–ö–∞–∫–∞—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã?",
                "options": ["–ó–µ–º–ª—è", "–Æ–ø–∏—Ç–µ—Ä", "–°–∞—Ç—É—Ä–Ω", "–ù–µ–ø—Ç—É–Ω"],
                "answer": 1,
            },
        ],
    }

    @classmethod
    def get_quiz(cls, category: str = "general") -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if category not in cls.QUIZZES or not cls.QUIZZES[category]:
            return None
        return random.choice(cls.QUIZZES[category])


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
class ReminderManager:
    @staticmethod
    async def set_reminder(user_id: int, text: str, remind_time: datetime) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if "reminders" not in users[str(user_id)]:
                users[str(user_id)]["reminders"] = []

            users[str(user_id)]["reminders"].append({
                "text": text,
                "time": remind_time.isoformat(),
                "created": datetime.now().isoformat(),
                "completed": False
            })
            save_data()
            return True
        except Exception as e:
            logger.error(f"Error setting reminder: {e}")
            return False

    @staticmethod
    async def check_reminders() -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∏"""
        try:
            current_time = datetime.now()
            for user_id, user_data in users.items():
                if "reminders" not in user_data:
                    continue

                for reminder in user_data["reminders"]:
                    if reminder["completed"]:
                        continue

                    remind_time = datetime.fromisoformat(reminder["time"])
                    if remind_time <= current_time:
                        try:
                            await bot.send_message(
                                user_id,
                                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['text']}\n"
                                f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {datetime.fromisoformat(reminder['created']).strftime('%Y-%m-%d %H:%M')}"
                            )
                            reminder["completed"] = True
                        except Exception as e:
                            logger.error(f"Error sending reminder to {user_id}: {e}")

            save_data()
        except Exception as e:
            logger.error(f"Error checking reminders: {e}")


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–π–∫–æ–∏–Ω–∞–º–∏ (—ç–∫–æ–Ω–æ–º–∏–∫–∞ –±–æ—Ç–∞)
class IriskyEconomy:
    @staticmethod
    async def add_irisky(user_id: int, amount: int, reason: str = "") -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞–π–∫–æ–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            user_id = str(user_id)
            if user_id not in users:
                users[user_id] = {
                    "username": "",
                    "messages_count": 0,
                    "warnings": [],
                    "ban_expiry": None,
                    "irisky": 0,
                    "is_moderator": False,
                    "irisky_history": [],
                }

            users[user_id]["irisky"] = users[user_id].get("irisky", 0) + amount

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            users[user_id]["irisky_history"].append({
                "date": datetime.now().isoformat(),
                "amount": amount,
                "balance": users[user_id]["irisky"],
                "reason": reason
            })

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(users[user_id]["irisky_history"]) > 50:
                users[user_id]["irisky_history"] = users[user_id]["irisky_history"][-50:]

            save_data()
        except Exception as e:
            logger.error(f"Error adding irisky to {user_id}: {e}")

    @staticmethod
    async def transfer_irisky(from_user_id: int, to_user_id: int, amount: int) -> bool:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–∞–π–∫–æ–∏–Ω—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            from_user_id = str(from_user_id)
            to_user_id = str(to_user_id)

            if from_user_id not in users or to_user_id not in users:
                return False

            if users[from_user_id]["irisky"] < amount:
                return False

            users[from_user_id]["irisky"] -= amount
            users[to_user_id]["irisky"] += amount

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            users[from_user_id]["irisky_history"].append({
                "date": datetime.now().isoformat(),
                "amount": -amount,
                "balance": users[from_user_id]["irisky"],
                "reason": f"–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_user_id}"
            })

            users[to_user_id]["irisky_history"].append({
                "date": datetime.now().isoformat(),
                "amount": amount,
                "balance": users[to_user_id]["irisky"],
                "reason": f"–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {from_user_id}"
            })

            save_data()
            return True
        except Exception as e:
            logger.error(f"Error transferring irisky: {e}")
            return False

    @staticmethod
    async def create_check(user_id: int, amount: int) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç —á–µ–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–π–∫–æ–∏–Ω–æ–≤"""
        try:
            user_id = str(user_id)
            if user_id not in users or users[user_id]["irisky"] < amount:
                return None

            check_code = ''.join(random.choices("ABCDEFGHJKLMNPQRSTUVWXYZ23456789", k=8))

            if check_code in checks:
                return None  # –ù–∞ —Å–ª—É—á–∞–π –∫–æ–ª–ª–∏–∑–∏–∏

            checks[check_code] = {
                "user_id": user_id,
                "amount": amount,
                "created": datetime.now().isoformat(),
                "activated": False
            }

            # –°–Ω–∏–º–∞–µ–º –ø–∞–π–∫–æ–∏–Ω—ã —É —Å–æ–∑–¥–∞—Ç–µ–ª—è
            users[user_id]["irisky"] -= amount

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            users[user_id]["irisky_history"].append({
                "date": datetime.now().isoformat(),
                "amount": -amount,
                "balance": users[user_id]["irisky"],
                "reason": f"–°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ {check_code}"
            })

            save_data()
            return check_code
        except Exception as e:
            logger.error(f"Error creating check: {e}")
            return None

    @staticmethod
    async def activate_check(user_id: int, check_code: str) -> Optional[int]:
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —á–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–∞–π–∫–æ–∏–Ω–æ–≤"""
        try:
            user_id = str(user_id)
            check_code = check_code.upper()

            if check_code not in checks or checks[check_code]["activated"]:
                return None

            amount = checks[check_code]["amount"]
            creator_id = checks[check_code]["user_id"]

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —á–µ–∫
            if creator_id == user_id:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞–π–∫–æ–∏–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ
                users[user_id]["irisky"] += amount

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                users[user_id]["irisky_history"].append({
                    "date": datetime.now().isoformat(),
                    "amount": amount,
                    "balance": users[user_id]["irisky"],
                    "reason": f"–û—Ç–º–µ–Ω–∞ —á–µ–∫–∞ {check_code}"
                })

                del checks[check_code]
                save_data()
                return None

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–∞–π–∫–æ–∏–Ω—ã –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            users[user_id]["irisky"] += amount

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            users[user_id]["irisky_history"].append({
                "date": datetime.now().isoformat(),
                "amount": amount,
                "balance": users[user_id]["irisky"],
                "reason": f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞ {check_code}"
            })

            checks[check_code]["activated"] = True
            checks[check_code]["activated_by"] = user_id
            checks[check_code]["activated_at"] = datetime.now().isoformat()

            save_data()
            return amount
        except Exception as e:
            logger.error(f"Error activating check: {e}")
            return None


# ================== –•–ï–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î ==================

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    uid = str(message.from_user.id)
    if uid not in users:
        users[uid] = {
            "username": message.from_user.username or message.from_user.full_name,
            "messages_count": 0,
            "warnings": [],
            "ban_expiry": None,
            "irisky": 100,  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            "is_moderator": False,
            "irisky_history": [{
                "date": datetime.now().isoformat(),
                "amount": 100,
                "balance": 100,
                "reason": "–ù–∞—á–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å"
            }],
            "reminders": [],
            "last_ferma": None,
        }
        save_data()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéÆ –ò–≥—Ä—ã"), KeyboardButton(text="üå§Ô∏è –ü–æ–≥–æ–¥–∞")],
            [KeyboardButton(text="üí∞ –ü–∞–π–∫–æ–∏–Ω—ã"), KeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"), KeyboardButton(text="üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")],
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {bold(message.from_user.full_name)}!\n\n"
        f"–Ø - –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –∏–≥—Ä–∞–º–∏, –ø–æ–≥–æ–¥–æ–π, —ç–∫–æ–Ω–æ–º–∏–∫–æ–π –∏ –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.\n\n"
        f"–í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {bold('100 –ø–∞–π–∫–æ–∏–Ω–æ–≤')}",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    commands_list = """üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üéÆ –ò–≥—Ä—ã:
/game_chess - –ù–∞—á–∞—Ç—å —à–∞—Ö–º–∞—Ç–Ω—É—é –ø–∞—Ä—Ç–∏—é
/game_checkers - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ —à–∞—à–∫–∏
/move [—Ö–æ–¥] - –°–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ
/end_game - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É

üåç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
/weather [–≥–æ—Ä–æ–¥] - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É
/map [–º–µ—Å—Ç–æ] - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –º–µ—Å—Ç–∞
/route [–æ—Ç–∫—É–¥–∞] [–∫—É–¥–∞] - –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
/translate [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π

üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞:
/get_irisky - –£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å
/transfer [ID] [—Å—É–º–º–∞] - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–∞–π–∫–æ–∏–Ω—ã
/create_check [—Å—É–º–º–∞] - –°–æ–∑–¥–∞—Ç—å —á–µ–∫
/activate_check [–∫–æ–¥] - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫
/irisky_history - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
/ferma - –ü–æ–ª—É—á–∏—Ç—å –ø–∞–π–∫–æ–∏–Ω—ã (—Ä–∞–∑ –≤ –¥–µ–Ω—å)

üìÖ –£—Ç–∏–ª–∏—Ç—ã:
/remind [–≤—Ä–µ–º—è] [—Ç–µ–∫—Å—Ç] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/quiz - –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
/who [—Ç–µ–∫—Å—Ç] - –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞

üëÆ‚Äç‚ôÇÔ∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è (–¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤):
/warn [ID] - –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
/ban [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unban [ID] - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/clearwarns [ID] - –°–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

‚Ñπ –ü—Ä–æ—á–µ–µ:
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/statistics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
/real_life - –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
"""

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã", callback_data="games"),
                InlineKeyboardButton(text="üå§Ô∏è –ü–æ–≥–æ–¥–∞", callback_data="weather"),
            ],
            [
                InlineKeyboardButton(text="üí∞ –ü–∞–π–∫–æ–∏–Ω—ã", callback_data="irisky"),
                InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            ],
        ]
    )

    await message.answer(commands_list, reply_markup=inline_keyboard)


@dp.message(F.text.lower() == "‚ùì –ø–æ–º–æ—â—å")
async def help_button(message: types.Message):
    await cmd_help(message)


@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    uid = str(message.from_user.id)
    if uid in users:
        user = users[uid]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = (
            f"üë§ {bold('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')}\n\n"
            f"üÜî ID: {code(uid)}\n"
            f"üìõ –ò–º—è: {user['username']}\n"
            f"üì® –°–æ–æ–±—â–µ–Ω–∏–π: {user['messages_count']}\n"
            f"üí∞ –ü–∞–π–∫–æ–∏–Ω—ã: {bold(str(user['irisky']))}\n"
            f"‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(user['warnings'])}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if user.get("is_moderator", False):
            profile_text += "\n‚≠ê –í—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if user.get("ban_expiry"):
            ban_time = datetime.fromisoformat(user["ban_expiry"])
            if ban_time > datetime.now():
                profile_text += f"\nüö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ: {ban_time.strftime('%Y-%m-%d %H:%M')}\n"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞–π–∫–æ–∏–Ω–æ–≤
        chart = await ChartGenerator.generate_irisky_chart(user)
        if chart:
            photo = BufferedInputFile(chart, filename="chart.png")
            await message.answer_photo(photo, caption=profile_text, parse_mode=ParseMode.HTML)
        else:
            await message.answer(profile_text, parse_mode=ParseMode.HTML)
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@dp.message(F.text.lower() == "üìä –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_button(message: types.Message):
    await cmd_profile(message)


@dp.message(Command("get_irisky"))
async def cmd_get_irisky(message: types.Message):
    uid = str(message.from_user.id)
    if uid in users:
        irisky = users[uid]["irisky"]
        await message.answer(f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {bold(str(irisky))} –ø–∞–π–∫–æ–∏–Ω–æ–≤", parse_mode=ParseMode.HTML)
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@dp.message(F.text.lower() == "üí∞ –ø–∞–π–∫–æ–∏–Ω—ã")
async def irisky_button(message: types.Message):
    await cmd_get_irisky(message)


@dp.message(Command("irisky_history"))
async def cmd_irisky_history(message: types.Message):
    uid = str(message.from_user.id)
    if uid not in users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    history = users[uid].get("irisky_history", [])
    if not history:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–∞–π–∫–æ–∏–Ω–∞–º–∏ –ø—É—Å—Ç–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π)
    history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–∞–π–∫–æ–∏–Ω–∞–º–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n\n"
    for item in history[-10:]:
        date = datetime.fromisoformat(item["date"]).strftime("%d.%m %H:%M")
        amount = item["amount"]
        balance = item["balance"]
        reason = item.get("reason", "")

        history_text += (
            f"{date} - {'+' if amount > 0 else ''}{amount} (–ë–∞–ª–∞–Ω—Å: {balance})\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        )

    await message.answer(history_text)


@dp.message(Command("transfer"))
async def cmd_transfer(message: types.Message):
    uid = str(message.from_user.id)
    if uid not in users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    try:
        args = message.text.split()
        if len(args) < 3:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /transfer [ID_–ø–æ–ª—É—á–∞—Ç–µ–ª—è] [—Å—É–º–º–∞]")
            return

        recipient_id = args[1]
        amount = int(args[2])

        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return

        if recipient_id == uid:
            await message.answer("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ø–∞–π–∫–æ–∏–Ω—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.")
            return

        if users[uid]["irisky"] < amount:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–π–∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            return

        if await IriskyEconomy.transfer_irisky(int(uid), int(recipient_id), amount):
            recipient_name = users.get(recipient_id, {}).get("username", recipient_id)
            await message.answer(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {bold(str(amount))} –ø–∞–π–∫–æ–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_name}.",
                parse_mode=ParseMode.HTML
            )
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


@dp.message(Command("create_check"))
async def cmd_create_check(message: types.Message):
    uid = str(message.from_user.id)
    if uid not in users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    try:
        amount = int(message.text.split(maxsplit=1)[1])
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ —á–µ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return

        if users[uid]["irisky"] < amount:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–π–∫–æ–∏–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞.")
            return

        check_code = await IriskyEconomy.create_check(int(uid), amount)
        if check_code:
            await message.answer(
                f"‚úÖ –ß–µ–∫ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üî¢ –ö–æ–¥ —á–µ–∫–∞: {code(check_code)}\n"
                f"üí∞ –°—É–º–º–∞: {bold(str(amount))} –ø–∞–π–∫–æ–∏–Ω–æ–≤\n\n"
                f"–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π /activate_check {check_code}",
                parse_mode=ParseMode.HTML
            )
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞.")
    except (ValueError, IndexError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_check [—Å—É–º–º–∞]")


@dp.message(Command("activate_check"))
async def cmd_activate_check(message: types.Message):
    uid = str(message.from_user.id)
    if uid not in users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    try:
        check_code = message.text.split(maxsplit=1)[1].strip().upper()
        amount = await IriskyEconomy.activate_check(int(uid), check_code)

        if amount is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —á–µ–∫.")
        else:
            await message.answer(
                f"üéâ –ß–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {bold(str(amount))} –ø–∞–π–∫–æ–∏–Ω–æ–≤!",
                parse_mode=ParseMode.HTML
            )
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /activate_check [–∫–æ–¥_—á–µ–∫–∞]")


@dp.message(Command("ferma"))
async def cmd_ferma(message: types.Message):
    uid = str(message.from_user.id)
    if uid not in users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ñ–µ—Ä–º—É
    last_ferma = users[uid].get("last_ferma")
    if last_ferma:
        last_time = datetime.fromisoformat(last_ferma)
        if (datetime.now() - last_time) < timedelta(hours=24):
            next_time = last_time + timedelta(hours=24)
            await message.answer(
                f"‚è≥ –í—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–ª–∏ –ø–∞–π–∫–æ–∏–Ω—ã —Å–µ–≥–æ–¥–Ω—è.\n"
                f"–°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω {next_time.strftime('%Y-%m-%d –≤ %H:%M')}."
            )
            return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
    now = datetime.now()
    holidays = [
        datetime(now.year, 1, 1),  # –ù–æ–≤—ã–π –≥–æ–¥
        datetime(now.year, 1, 7),  # –†–æ–∂–¥–µ—Å—Ç–≤–æ
        datetime(now.year, 2, 23),  # –î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞
        datetime(now.year, 3, 8),  # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å
        datetime(now.year, 5, 1),  # –ü—Ä–∞–∑–¥–Ω–∏–∫ –≤–µ—Å–Ω—ã –∏ —Ç—Ä—É–¥–∞
        datetime(now.year, 5, 9),  # –î–µ–Ω—å –ü–æ–±–µ–¥—ã
        datetime(now.year, 6, 12),  # –î–µ–Ω—å –†–æ—Å—Å–∏–∏
        datetime(now.year, 11, 4),  # –î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞
        datetime(now.year, 12, 31)  # –ö–∞–Ω—É–Ω –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞
    ]

    base_reward = random.randint(10, 30)
    holiday_bonus = 0
    holiday_name = ""

    for date in holidays:
        if now.date() == date.date():
            holiday_bonus = random.randint(20, 50)
            holiday_names = {
                1: "üéÑ –ù–æ–≤—ã–π –≥–æ–¥",
                7: "üéÑ –†–æ–∂–¥–µ—Å—Ç–≤–æ",
                23: "üéñÔ∏è –î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞",
                8: "üå∏ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å",
                1: "üå∑ –ü—Ä–∞–∑–¥–Ω–∏–∫ –≤–µ—Å–Ω—ã –∏ —Ç—Ä—É–¥–∞",
                9: "üéñÔ∏è –î–µ–Ω—å –ü–æ–±–µ–¥—ã",
                12: "üá∑üá∫ –î–µ–Ω—å –†–æ—Å—Å–∏–∏",
                4: "ü§ù –î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞",
                31: "üéÑ –ö–∞–Ω—É–Ω –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞",
            }
            holiday_name = holiday_names.get(date.day, "–ü—Ä–∞–∑–¥–Ω–∏–∫")
            break

    total_reward = base_reward + holiday_bonus

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–π–∫–æ–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await IriskyEconomy.add_irisky(int(uid), total_reward, "–§–µ—Ä–º–∞")
    users[uid]["last_ferma"] = datetime.now().isoformat()
    save_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (
        f"üåæ –í—ã —Å–æ–±—Ä–∞–ª–∏ —É—Ä–æ–∂–∞–π –ø–∞–π–∫–æ–∏–Ω–æ–≤!\n\n"
        f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ: {bold(str(total_reward))}\n"
        f"‚Ä¢ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {base_reward}\n"
    )

    if holiday_bonus > 0:
        response += f"‚Ä¢ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –±–æ–Ω—É—Å ({holiday_name}): +{holiday_bonus}\n"

    response += (
        f"\nüíµ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {bold(str(users[uid]['irisky']))}\n"
        f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞."
    )

    await message.answer(response, parse_mode=ParseMode.HTML)


@dp.message(Command("weather"))
async def cmd_weather(message: types.Message):
    try:
        city = message.text.split(maxsplit=1)[1]
    except IndexError:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather [–≥–æ—Ä–æ–¥]")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_STATES[message.from_user.id] = {"waiting_for": "weather", "city": city}

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞", callback_data=f"weather_current_{city}"),
                InlineKeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è", callback_data=f"weather_forecast_{city}"),
            ],
            [
                InlineKeyboardButton(text="–ö–∞—Ä—Ç–∞ –≥–æ—Ä–æ–¥–∞", callback_data=f"weather_map_{city}"),
            ]
        ]
    )

    await message.answer(
        f"üå§Ô∏è –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ {city} –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?",
        reply_markup=keyboard
    )


@dp.message(F.text.lower() == "üå§Ô∏è –ø–æ–≥–æ–¥–∞")
async def weather_button(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:")


@dp.callback_query(F.data.startswith("weather_"))
async def weather_callback_handler(callback: types.CallbackQuery):
    action, city = callback.data.split("_")[1], callback.data.split("_", 2)[2]

    if action == "current":
        weather_data = await WeatherAPI.get_weather(city)
        weather_text = WeatherAPI.format_weather(weather_data)
        await callback.message.answer(weather_text)
    elif action == "forecast":
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
        await callback.message.answer(f"üöß –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º!")
    elif action == "map":
        map_image = await MapsAPI.get_map_image(city)
        if map_image:
            photo = BufferedInputFile(map_image, filename="map.png")
            await callback.message.answer_photo(photo, caption=f"üó∫ –ö–∞—Ä—Ç–∞ {city}")
        else:
            await callback.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—É –¥–ª—è {city}")

    await callback.answer()


@dp.message(Command("map"))
async def cmd_map(message: types.Message):
    try:
        location = message.text.split(maxsplit=1)[1]
    except IndexError:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ: /map [–º–µ—Å—Ç–æ]")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(f"üîÑ –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã –¥–ª—è {location}...")

    map_image = await MapsAPI.get_map_image(location)
    if map_image:
        photo = BufferedInputFile(map_image, filename="map.png")
        await message.answer_photo(photo, caption=f"üó∫ –ö–∞—Ä—Ç–∞ {location}")
        await processing_msg.delete()
    else:
        await processing_msg.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—É –¥–ª—è {location}")


@dp.message(Command("route"))
async def cmd_route(message: types.Message):
    try:
        args = message.text.split(maxsplit=2)
        origin = args[1]
        destination = args[2]
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /route [–æ—Ç–∫—É–¥–∞] [–∫—É–¥–∞]")
        return

    processing_msg = await message.answer(f"üîÑ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ {origin} –≤ {destination}...")

    route_image = await MapsAPI.get_route_map(origin, destination)
    if route_image:
        photo = BufferedInputFile(route_image, filename="route.png")
        await message.answer_photo(
            photo,
            caption=f"üõ£ –ú–∞—Ä—à—Ä—É—Ç –∏–∑ {origin} –≤ {destination}",
        )
        await processing_msg.delete()
    else:
        await processing_msg.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏–∑ {origin} –≤ {destination}")


@dp.message(Command("translate"))
async def cmd_translate(message: types.Message):
    try:
        text = message.text.split(maxsplit=1)[1]
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /translate [—Ç–µ–∫—Å—Ç]")
        return

    processing_msg = await message.answer("üîÑ –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞...")

    translated = await TranslateAPI.translate_text(text)
    if translated:
        await processing_msg.edit_text(
            f"üåç –ü–µ—Ä–µ–≤–æ–¥:\n\n"
            f"üìå –û—Ä–∏–≥–∏–Ω–∞–ª: {text}\n\n"
            f"üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥: {translated}"
        )
    else:
        await processing_msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command("quiz"))
async def cmd_quiz(message: types.Message):
    quiz = QuizManager.get_quiz()
    if not quiz:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_STATES[message.from_user.id] = {
        "waiting_for": "quiz_answer",
        "quiz": quiz,
        "correct_answer": quiz["answer"],
    }

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=option, callback_data=f"quiz_{idx}")]
            for idx, option in enumerate(quiz["options"])
        ]
    )

    await message.answer(
        f"üéØ –í–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n{quiz['question']}",
        reply_markup=keyboard
    )


@dp.message(F.text.lower() == "üéØ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def quiz_button(message: types.Message):
    await cmd_quiz(message)


@dp.callback_query(F.data.startswith("quiz_"))
async def quiz_callback_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in USER_STATES or USER_STATES[user_id].get("waiting_for") != "quiz_answer":
        await callback.answer("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
        return

    answer_idx = int(callback.data.split("_")[1])
    quiz = USER_STATES[user_id]["quiz"]
    correct_idx = USER_STATES[user_id]["correct_answer"]

    if answer_idx == correct_idx:
        # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        reward = random.randint(5, 15)
        await IriskyEconomy.add_irisky(user_id, reward, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ")

        await callback.message.edit_text(
            f"‚úÖ {bold('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n\n"
            f"–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {quiz['options'][correct_idx]}\n\n"
            f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –ø–∞–π–∫–æ–∏–Ω–æ–≤!",
            parse_mode=ParseMode.HTML
        )
    else:
        await callback.message.edit_text(
            f"‚ùå {bold('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {quiz['options'][correct_idx]}"
        )

    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    del USER_STATES[user_id]["waiting_for"]
    await callback.answer()


@dp.message(Command("remind"))
async def cmd_remind(message: types.Message):
    try:
        args = message.text.split(maxsplit=2)
        time_str = args[1]
        text = args[2]
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind [–≤—Ä–µ–º—è] [—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è]\n–ü—Ä–∏–º–µ—Ä: /remind 15:30 –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        now = datetime.now()
        remind_time = datetime.strptime(time_str, "%H:%M").replace(
            year=now.year,
            month=now.month,
            day=now.day
        )

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if remind_time < now:
            remind_time += timedelta(days=1)

        if await ReminderManager.set_reminder(message.from_user.id, text, remind_time):
            await message.answer(
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_time.strftime('%Y-%m-%d %H:%M')}:\n"
                f"{text}"
            )
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 15:30")


@dp.message(Command("who"))
async def cmd_who(message: types.Message):
    try:
        text = message.text.split(maxsplit=1)[1]
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /who [—Ç–µ–∫—Å—Ç]\n–ü—Ä–∏–º–µ—Ä: /who –¥–æ–ª–∂–µ–Ω –≤—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    chat_members = await bot.get_chat_administrators(message.chat.id)
    if not chat_members:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    chosen_member = random.choice(chat_members).user

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    responses = [
        f"üé≤ {chosen_member.first_name}, {text}",
        f"‚ú® –ü–æ –∂—Ä–µ–±–∏—é –≤—ã–ø–∞–ª–æ: {chosen_member.first_name}, {text}",
        f"üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –≥–æ–≤–æ—Ä–∏—Ç: {chosen_member.first_name}, {text}",
        f"ü§î –î—É–º–∞—é, —á—Ç–æ {chosen_member.first_name} –¥–æ–ª–∂–µ–Ω(–∞) {text}",
        f"üëë –ö–æ—Ä–æ–Ω–∞ –¥–æ—Å—Ç–∞–µ—Ç—Å—è {chosen_member.first_name}, {text}",
    ]

    await message.answer(random.choice(responses))


@dp.message(Command("real_life"))
async def cmd_real_life(message: types.Message):
    response = """
üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏:

1. **–ë—É–¥–∏–ª—å–Ω–∏–∫**: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ (—Å–º–∞—Ä—Ç—Ñ–æ–Ω, —á–∞—Å—ã).
2. **–ú—É–∑—ã–∫–∞**: –í–∫–ª—é—á–∏—Ç–µ –ª—é–±–∏–º—É—é –ø–µ—Å–Ω—é –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç —á–µ—Ä–µ–∑ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å (–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞, Spotify).
3. **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö.
4. **–ü–æ–≥–æ–¥–∞**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–≥–æ–¥—É —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏.
5. **–ü–µ—Ä–µ–≤–æ–¥—ã**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Translate –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.
6. **–£–º–Ω—ã–π –¥–æ–º**: –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º, –∫–ª–∏–º–∞—Ç–æ–º –∏ —Ç–µ—Ö–Ω–∏–∫–æ–π —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç–∏–ø–∞ –Ø–Ω–¥–µ–∫—Å.–î–æ–º–∞ –∏–ª–∏ MiHome.
7. **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ**: –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
8. **–ö–∞—Ä—Ç—ã**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Maps –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
9. **–ó–¥–æ—Ä–æ–≤—å–µ**: –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å–æ–Ω —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è.
10. **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.
"""
    await message.answer(response)


@dp.message(Command("statistics"))
async def cmd_statistics(message: types.Message):
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
    top_users = sorted(
        users.items(),
        key=lambda x: x[1].get("messages_count", 0),
        reverse=True
    )[:5]

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–π–∫–æ–∏–Ω–∞–º
    top_rich = sorted(
        users.items(),
        key=lambda x: x[1].get("irisky", 0),
        reverse=True
    )[:5]

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_users = len(users)
    total_messages = sum(user.get("messages_count", 0) for user in users.values())
    total_irisky = sum(user.get("irisky", 0) for user in users.values())

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    stats_text = (
        f"üìä {bold('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞')}\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
        f"üí∞ –í—Å–µ–≥–æ –ø–∞–π–∫–æ–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_irisky}\n\n"
        f"üèÜ {bold('–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:')}\n"
    )

    for idx, (uid, data) in enumerate(top_users, 1):
        stats_text += f"{idx}. {data.get('username', uid)} - {data.get('messages_count', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    stats_text += f"\nüí∞ {bold('–¢–æ–ø –±–æ–≥–∞—á–µ–π:')}\n"
    for idx, (uid, data) in enumerate(top_rich, 1):
        stats_text += f"{idx}. {data.get('username', uid)} - {data.get('irisky', 0)} –ø–∞–π–∫–æ–∏–Ω–æ–≤\n"

    await message.answer(stats_text, parse_mode=ParseMode.HTML)


@dp.message(Command("game_chess"))
async def game_chess(message: types.Message):
    gid = str(message.chat.id)
    if gid not in GAME_STATES:
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
        white_player = message.from_user.full_name
        black_player = "AI"  # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        game = ChessGame(white_player, black_player)
        GAME_STATES[gid] = game

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–æ—Å–∫—É
        await draw_board_and_send(message.chat.id, game.board)

        await message.answer(
            f"‚ôü {bold('–ù–æ–≤–∞—è —à–∞—Ö–º–∞—Ç–Ω–∞—è –ø–∞—Ä—Ç–∏—è!')}\n\n"
            f"‚ö™ –ë–µ–ª—ã–µ: {white_player}\n"
            f"‚ö´ –ß—ë—Ä–Ω—ã–µ: {black_player}\n\n"
            f"–°–µ–π—á–∞—Å —Ö–æ–¥—è—Ç: {bold(game.current_turn.capitalize())}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /move [—Ö–æ–¥] —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: /move e2e4",
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer(
            "‚ö† –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –ø–∞—Ä—Ç–∏—é –∫–æ–º–∞–Ω–¥–æ–π /end_chess –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Ö–æ–¥.\n"
            f"–¢–µ–∫—É—â–∏–π —Ö–æ–¥: {GAME_STATES[gid].current_turn.capitalize()}"
        )


@dp.message(F.text.lower() == "üéÆ –∏–≥—Ä—ã")
async def games_button(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ôü –®–∞—Ö–º–∞—Ç—ã", callback_data="game_chess")],
            [InlineKeyboardButton(text="üî¥ –®–∞—à–∫–∏", callback_data="game_checkers")],
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=keyboard)


@dp.callback_query(F.data == "game_chess")
async def game_chess_callback(callback: types.CallbackQuery):
    await callback.message.delete()
    await game_chess(callback.message)


async def draw_board_and_send(chat_id: int, board: chess.Board, orientation: chess.Color = chess.WHITE) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG
        svg_data = chess.svg.board(
            board=board,
            orientation=orientation,
            size=400,
            lastmove=board.peek() if board.move_stack else None,
            check=board.king(chess.WHITE if board.turn == chess.WHITE else chess.BLACK) if board.is_check() else None,
        )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
        drawing = svg2rlg(BytesIO(svg_data.encode("utf-8")))
        png_image = renderPM.drawToString(drawing, fmt="PNG")

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ
        photo = BufferedInputFile(png_image, filename="chess_board.png")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await bot.send_photo(chat_id, photo=photo)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å–∫–∏: {e}")
        await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å–∫–∏.")


@dp.message(Command("move"))
async def handle_move(message: types.Message):
    gid = str(message.chat.id)
    if gid not in GAME_STATES or not isinstance(GAME_STATES[gid], ChessGame):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /game_chess")
        return

    try:
        move_str = message.text.split(maxsplit=1)[1].strip()
    except IndexError:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ö–æ–¥: /move [—Ö–æ–¥]\n–ü—Ä–∏–º–µ—Ä: /move e2e4")
        return

    game = GAME_STATES[gid]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥
    current_player = game.white_player if game.current_turn == "white" else game.black_player
    if message.from_user.full_name != current_player and current_player != "AI":
        await message.answer(f"–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ö–æ–¥ –æ—Ç {current_player}.")
        return

    if game.move(move_str):
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ö–æ–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É
        await draw_board_and_send(
            message.chat.id,
            game.board,
            chess.WHITE if game.current_turn == "white" else chess.BLACK
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
        winner = game.winner()
        if winner:
            status = game.get_game_status()
            duration = game.get_game_duration()

            if winner == "Draw":
                result_text = f"üéâ {bold('–ù–∏—á—å—è!')}\n{status}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã: {duration}"
            else:
                result_text = (
                    f"üéâ {bold('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!')}\n"
                    f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {bold(winner)}\n"
                    f"{status}\n"
                    f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã: {duration}"
                )

                # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ AI
                if winner != "AI":
                    uid = next((uid for uid, data in users.items() if data.get("username") == winner), None)
                    if uid:
                        reward = random.randint(20, 50)
                        await IriskyEconomy.add_irisky(int(uid), reward, "–ü–æ–±–µ–¥–∞ –≤ —à–∞—Ö–º–∞—Ç–∞—Ö")
                        result_text += f"\n\nüèÜ {winner} –ø–æ–ª—É—á–∞–µ—Ç {reward} –ø–∞–π–∫–æ–∏–Ω–æ–≤ –∑–∞ –ø–æ–±–µ–¥—É!"

            await message.answer(result_text, parse_mode=ParseMode.HTML)
            del GAME_STATES[gid]
        else:
            status = game.get_game_status()
            await message.answer(
                f"‚ôü –•–æ–¥ {code(move_str)} –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
                f"–°–µ–π—á–∞—Å —Ö–æ–¥—è—Ç: {bold(game.current_turn.capitalize())}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}",
                parse_mode=ParseMode.HTML
            )
    else:
        await message.answer(
            f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥: {code(move_str)}\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ö–æ–¥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
            parse_mode=ParseMode.HTML
        )


@dp.message(Command("end_chess"))
async def end_chess(message: types.Message):
    gid = str(message.chat.id)
    if gid in GAME_STATES and isinstance(GAME_STATES[gid], ChessGame):
        game = GAME_STATES[gid]
        duration = game.get_game_duration()
        del GAME_STATES[gid]
        await message.answer(
            f"üèÅ –ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –î–æ—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞.\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã: {duration}"
        )
    else:
        await message.answer("–ê–∫—Ç–∏–≤–Ω–æ–π —à–∞—Ö–º–∞—Ç–Ω–æ–π –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@dp.message(Command("game_checkers"))
async def game_checkers(message: types.Message):
    gid = str(message.chat.id)
    if gid not in GAME_STATES:
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
        player1 = message.from_user.full_name
        player2 = "AI"  # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        game = CheckersGame(player1, player2)
        GAME_STATES[gid] = game

        await message.answer(
            f"üî¥ {bold('–ù–æ–≤–∞—è –∏–≥—Ä–∞ –≤ —à–∞—à–∫–∏!')}\n\n"
            f"üîò –ò–≥—Ä–æ–∫ 1: {player1}\n"
            f"üî¥ –ò–≥—Ä–æ–∫ 2: {player2}\n\n"
            f"–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: {bold(game.current_player)}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /move_checkers [–æ—Ç–∫—É–¥–∞] [–∫—É–¥–∞] —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: /move_checkers 52 43\n\n"
            f"{code(game.show_board())}",
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer(
            "‚ö† –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –ø–∞—Ä—Ç–∏—é –∫–æ–º–∞–Ω–¥–æ–π /end_checkers –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Ö–æ–¥.\n"
            f"–¢–µ–∫—É—â–∏–π —Ö–æ–¥: {GAME_STATES[gid].current_player}"
        )


@dp.message(Command("move_checkers"))
async def handle_checkers_move(message: types.Message):
    gid = str(message.chat.id)
    if gid not in GAME_STATES or not isinstance(GAME_STATES[gid], CheckersGame):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /game_checkers")
        return

    try:
        args = message.text.split()
        from_pos = args[1]
        to_pos = args[2]
    except IndexError:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ö–æ–¥: /move_checkers [–æ—Ç–∫—É–¥–∞] [–∫—É–¥–∞]\n–ü—Ä–∏–º–µ—Ä: /move_checkers 52 43")
        return

    game = GAME_STATES[gid]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥
    if message.from_user.full_name != game.current_player and game.current_player != "AI":
        await message.answer(f"–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ö–æ–¥ –æ—Ç {game.current_player}.")
        return

    if game.move(from_pos, to_pos):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
        winner = game.winner()
        if winner:
            if winner == "Draw":
                result_text = "üéâ –ù–∏—á—å—è!"
            else:
                result_text = f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {bold(winner)}!"

                # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ AI
                if winner != "AI":
                    uid = next((uid for uid, data in users.items() if data.get("username") == winner), None)
                    if uid:
                        reward = random.randint(15, 40)
                        await IriskyEconomy.add_irisky(int(uid), reward, "–ü–æ–±–µ–¥–∞ –≤ —à–∞—à–∫–∞—Ö")
                        result_text += f"\n\nüèÜ {winner} –ø–æ–ª—É—á–∞–µ—Ç {reward} –ø–∞–π–∫–æ–∏–Ω–æ–≤ –∑–∞ –ø–æ–±–µ–¥—É!"

            await message.answer(
                f"{result_text}\n\n"
                f"–ò—Ç–æ–≥–æ–≤–∞—è –¥–æ—Å–∫–∞:\n\n"
                f"{code(game.show_board())}",
                parse_mode=ParseMode.HTML
            )
            del GAME_STATES[gid]
        else:
            await message.answer(
                f"üî¥ –•–æ–¥ {from_pos}-{to_pos} –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
                f"–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: {bold(game.current_player)}\n\n"
                f"{code(game.show_board())}",
                parse_mode=ParseMode.HTML
            )
    else:
        await message.answer(
            f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥: {from_pos}-{to_pos}\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ö–æ–¥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
            parse_mode=ParseMode.HTML
        )


@dp.message(Command("end_checkers"))
async def end_checkers(message: types.Message):
    gid = str(message.chat.id)
    if gid in GAME_STATES and isinstance(GAME_STATES[gid], CheckersGame):
        game = GAME_STATES[gid]
        del GAME_STATES[gid]
        await message.answer(
            f"üèÅ –ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –î–æ—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞.\n\n"
            f"–ò—Ç–æ–≥–æ–≤–∞—è –¥–æ—Å–∫–∞:\n\n"
            f"{code(game.show_board())}",
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer("–ê–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —à–∞—à–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@dp.callback_query(F.data == "game_checkers")
async def game_checkers_callback(callback: types.CallbackQuery):
    await callback.message.delete()
    await game_checkers(callback.message)


# ================== –ú–û–î–ï–†–ê–¶–ò–û–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ ==================

@dp.message(Command("warn"))
async def cmd_warn(message: types.Message):
    uid = str(message.from_user.id)
    if not users.get(uid, {}).get("is_moderator", False):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
        return

    try:
        args = message.text.split(maxsplit=2)
        warn_id = args[1]
        reason = args[2] if len(args) > 2 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞"
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /warn [ID] [–ø—Ä–∏—á–∏–Ω–∞]")
        return

    if warn_id not in users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    users[warn_id]["warnings"].append({
        "timestamp": datetime.now().isoformat(),
        "reason": reason,
        "moderator": users[uid]["username"],
    })

    warn_count = len(users[warn_id]["warnings"])

    # –ï—Å–ª–∏ 3 –∏–ª–∏ –±–æ–ª–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π - –±–∞–Ω –Ω–∞ 24 —á–∞—Å–∞
    if warn_count >= 3:
        users[warn_id]["ban_expiry"] = (datetime.now() + timedelta(hours=24)).isoformat()
        await message.answer(
            f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {users[warn_id]['username']} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({warn_count}/3).\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 24 —á–∞—Å–∞ –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è."
        )
    else:
        await message.answer(
            f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {users[warn_id]['username']} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({warn_count}/3).\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )

    save_data()


@dp.message(Command("ban"))
async def cmd_ban(message: types.Message):
    uid = str(message.from_user.id)
    if not users.get(uid, {}).get("is_moderator", False):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    try:
        args = message.text.split(maxsplit=2)
        ban_id = args[1]
        reason = args[2] if len(args) > 2 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞"
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban [ID] [–ø—Ä–∏—á–∏–Ω–∞]")
        return

    if ban_id not in users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    users[ban_id]["ban_expiry"] = (datetime.now() + timedelta(hours=24)).isoformat()
    await message.answer(
        f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {users[ban_id]['username']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 24 —á–∞—Å–∞.\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
    )
    save_data()


@dp.message(Command("unban"))
async def cmd_unban(message: types.Message):
    uid = str(message.from_user.id)
    if not users.get(uid, {}).get("is_moderator", False):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    try:
        unban_id = message.text.split(maxsplit=1)[1]
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban [ID]")
        return

    if unban_id not in users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    users[unban_id]["ban_expiry"] = None
    users[unban_id]["warnings"] = []  # –°–Ω–∏–º–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {users[unban_id]['username']} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    save_data()


@dp.message(Command("clearwarns"))
async def cmd_clearwarns(message: types.Message):
    uid = str(message.from_user.id)
    if not users.get(uid, {}).get("is_moderator", False):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
        return

    try:
        clear_id = message.text.split(maxsplit=1)[1]
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /clearwarns [ID]")
        return

    if clear_id not in users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    users[clear_id]["warnings"] = []
    await message.answer(f"‚úÖ –í—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {users[clear_id]['username']} —Å–Ω—è—Ç—ã.")
    save_data()


# ================== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ==================

@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {exception}", exc_info=True)

    try:
        if isinstance(update, types.Message):
            await update.answer(
                "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")


# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================

async def on_startup():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    asyncio.create_task(check_reminders_background())


async def check_reminders_background():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    while True:
        try:
            await ReminderManager.check_reminders()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


async def on_shutdown():
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    save_data()


async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    )

    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
